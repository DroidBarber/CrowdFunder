import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface Staking20UpgradeableInterface extends utils.Interface {
    functions: {
        "claimRewards()": FunctionFragment;
        "getStakeInfo(address)": FunctionFragment;
        "rewardRatioDenominator()": FunctionFragment;
        "rewardRatioNumerator()": FunctionFragment;
        "setRewardRatio(uint256,uint256)": FunctionFragment;
        "setTimeUnit(uint256)": FunctionFragment;
        "stake(uint256)": FunctionFragment;
        "stakers(address)": FunctionFragment;
        "stakersArray(uint256)": FunctionFragment;
        "timeUnit()": FunctionFragment;
        "token()": FunctionFragment;
        "withdraw(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "claimRewards" | "getStakeInfo" | "rewardRatioDenominator" | "rewardRatioNumerator" | "setRewardRatio" | "setTimeUnit" | "stake" | "stakers" | "stakersArray" | "timeUnit" | "token" | "withdraw"): FunctionFragment;
    encodeFunctionData(functionFragment: "claimRewards", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStakeInfo", values: [string]): string;
    encodeFunctionData(functionFragment: "rewardRatioDenominator", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardRatioNumerator", values?: undefined): string;
    encodeFunctionData(functionFragment: "setRewardRatio", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "setTimeUnit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakers", values: [string]): string;
    encodeFunctionData(functionFragment: "stakersArray", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "timeUnit", values?: undefined): string;
    encodeFunctionData(functionFragment: "token", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "claimRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakeInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardRatioDenominator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardRatioNumerator", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRewardRatio", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTimeUnit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakersArray", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timeUnit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "Initialized(uint8)": EventFragment;
        "RewardsClaimed(address,uint256)": EventFragment;
        "TokensStaked(address,uint256)": EventFragment;
        "TokensWithdrawn(address,uint256)": EventFragment;
        "UpdatedMinStakeAmount(uint256,uint256)": EventFragment;
        "UpdatedRewardRatio(uint256,uint256,uint256,uint256)": EventFragment;
        "UpdatedTimeUnit(uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedMinStakeAmount"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedRewardRatio"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedTimeUnit"): EventFragment;
}
export interface InitializedEventObject {
    version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;
export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;
export interface RewardsClaimedEventObject {
    staker: string;
    rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<[
    string,
    BigNumber
], RewardsClaimedEventObject>;
export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;
export interface TokensStakedEventObject {
    staker: string;
    amount: BigNumber;
}
export type TokensStakedEvent = TypedEvent<[
    string,
    BigNumber
], TokensStakedEventObject>;
export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;
export interface TokensWithdrawnEventObject {
    staker: string;
    amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<[
    string,
    BigNumber
], TokensWithdrawnEventObject>;
export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;
export interface UpdatedMinStakeAmountEventObject {
    oldAmount: BigNumber;
    newAmount: BigNumber;
}
export type UpdatedMinStakeAmountEvent = TypedEvent<[
    BigNumber,
    BigNumber
], UpdatedMinStakeAmountEventObject>;
export type UpdatedMinStakeAmountEventFilter = TypedEventFilter<UpdatedMinStakeAmountEvent>;
export interface UpdatedRewardRatioEventObject {
    oldNumerator: BigNumber;
    newNumerator: BigNumber;
    oldDenominator: BigNumber;
    newDenominator: BigNumber;
}
export type UpdatedRewardRatioEvent = TypedEvent<[
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
], UpdatedRewardRatioEventObject>;
export type UpdatedRewardRatioEventFilter = TypedEventFilter<UpdatedRewardRatioEvent>;
export interface UpdatedTimeUnitEventObject {
    oldTimeUnit: BigNumber;
    newTimeUnit: BigNumber;
}
export type UpdatedTimeUnitEvent = TypedEvent<[
    BigNumber,
    BigNumber
], UpdatedTimeUnitEventObject>;
export type UpdatedTimeUnitEventFilter = TypedEventFilter<UpdatedTimeUnitEvent>;
export interface Staking20Upgradeable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: Staking20UpgradeableInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        claimRewards(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _tokensStaked: BigNumber;
            _rewards: BigNumber;
        }>;
        rewardRatioDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;
        rewardRatioNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;
        setRewardRatio(_numerator: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        stake(_amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            amountStaked: BigNumber;
            timeOfLastUpdate: BigNumber;
            unclaimedRewards: BigNumber;
        }>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        timeUnit(overrides?: CallOverrides): Promise<[BigNumber]>;
        token(overrides?: CallOverrides): Promise<[string]>;
        withdraw(_amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    claimRewards(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber
    ] & {
        _tokensStaked: BigNumber;
        _rewards: BigNumber;
    }>;
    rewardRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
    rewardRatioNumerator(overrides?: CallOverrides): Promise<BigNumber>;
    setRewardRatio(_numerator: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    stake(_amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    stakers(arg0: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        amountStaked: BigNumber;
        timeOfLastUpdate: BigNumber;
        unclaimedRewards: BigNumber;
    }>;
    stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    timeUnit(overrides?: CallOverrides): Promise<BigNumber>;
    token(overrides?: CallOverrides): Promise<string>;
    withdraw(_amount: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        claimRewards(overrides?: CallOverrides): Promise<void>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber
        ] & {
            _tokensStaked: BigNumber;
            _rewards: BigNumber;
        }>;
        rewardRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        rewardRatioNumerator(overrides?: CallOverrides): Promise<BigNumber>;
        setRewardRatio(_numerator: BigNumberish, _denominator: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: CallOverrides): Promise<void>;
        stake(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            amountStaked: BigNumber;
            timeOfLastUpdate: BigNumber;
            unclaimedRewards: BigNumber;
        }>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        timeUnit(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<string>;
        withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "Initialized(uint8)"(version?: null): InitializedEventFilter;
        Initialized(version?: null): InitializedEventFilter;
        "RewardsClaimed(address,uint256)"(staker?: string | null, rewardAmount?: null): RewardsClaimedEventFilter;
        RewardsClaimed(staker?: string | null, rewardAmount?: null): RewardsClaimedEventFilter;
        "TokensStaked(address,uint256)"(staker?: string | null, amount?: null): TokensStakedEventFilter;
        TokensStaked(staker?: string | null, amount?: null): TokensStakedEventFilter;
        "TokensWithdrawn(address,uint256)"(staker?: string | null, amount?: null): TokensWithdrawnEventFilter;
        TokensWithdrawn(staker?: string | null, amount?: null): TokensWithdrawnEventFilter;
        "UpdatedMinStakeAmount(uint256,uint256)"(oldAmount?: null, newAmount?: null): UpdatedMinStakeAmountEventFilter;
        UpdatedMinStakeAmount(oldAmount?: null, newAmount?: null): UpdatedMinStakeAmountEventFilter;
        "UpdatedRewardRatio(uint256,uint256,uint256,uint256)"(oldNumerator?: null, newNumerator?: null, oldDenominator?: null, newDenominator?: null): UpdatedRewardRatioEventFilter;
        UpdatedRewardRatio(oldNumerator?: null, newNumerator?: null, oldDenominator?: null, newDenominator?: null): UpdatedRewardRatioEventFilter;
        "UpdatedTimeUnit(uint256,uint256)"(oldTimeUnit?: null, newTimeUnit?: null): UpdatedTimeUnitEventFilter;
        UpdatedTimeUnit(oldTimeUnit?: null, newTimeUnit?: null): UpdatedTimeUnitEventFilter;
    };
    estimateGas: {
        claimRewards(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;
        rewardRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>;
        rewardRatioNumerator(overrides?: CallOverrides): Promise<BigNumber>;
        setRewardRatio(_numerator: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        stake(_amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        timeUnit(overrides?: CallOverrides): Promise<BigNumber>;
        token(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(_amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        claimRewards(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardRatioDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardRatioNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setRewardRatio(_numerator: BigNumberish, _denominator: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        stake(_amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        timeUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(_amount: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=Staking20Upgradeable.d.ts.map