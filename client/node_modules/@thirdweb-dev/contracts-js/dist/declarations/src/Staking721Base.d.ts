import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
export interface Staking721BaseInterface extends utils.Interface {
    functions: {
        "claimRewards()": FunctionFragment;
        "contractURI()": FunctionFragment;
        "getStakeInfo(address)": FunctionFragment;
        "indexedTokens(uint256)": FunctionFragment;
        "isIndexed(uint256)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "nftCollection()": FunctionFragment;
        "owner()": FunctionFragment;
        "rewardToken()": FunctionFragment;
        "rewardsPerUnitTime()": FunctionFragment;
        "setContractURI(string)": FunctionFragment;
        "setOwner(address)": FunctionFragment;
        "setRewardsPerUnitTime(uint256)": FunctionFragment;
        "setTimeUnit(uint256)": FunctionFragment;
        "stake(uint256[])": FunctionFragment;
        "stakerAddress(uint256)": FunctionFragment;
        "stakers(address)": FunctionFragment;
        "stakersArray(uint256)": FunctionFragment;
        "timeUnit()": FunctionFragment;
        "withdraw(uint256[])": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "claimRewards" | "contractURI" | "getStakeInfo" | "indexedTokens" | "isIndexed" | "multicall" | "nftCollection" | "owner" | "rewardToken" | "rewardsPerUnitTime" | "setContractURI" | "setOwner" | "setRewardsPerUnitTime" | "setTimeUnit" | "stake" | "stakerAddress" | "stakers" | "stakersArray" | "timeUnit" | "withdraw"): FunctionFragment;
    encodeFunctionData(functionFragment: "claimRewards", values?: undefined): string;
    encodeFunctionData(functionFragment: "contractURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "getStakeInfo", values: [string]): string;
    encodeFunctionData(functionFragment: "indexedTokens", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isIndexed", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "nftCollection", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardToken", values?: undefined): string;
    encodeFunctionData(functionFragment: "rewardsPerUnitTime", values?: undefined): string;
    encodeFunctionData(functionFragment: "setContractURI", values: [string]): string;
    encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
    encodeFunctionData(functionFragment: "setRewardsPerUnitTime", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "setTimeUnit", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stake", values: [BigNumberish[]]): string;
    encodeFunctionData(functionFragment: "stakerAddress", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "stakers", values: [string]): string;
    encodeFunctionData(functionFragment: "stakersArray", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "timeUnit", values?: undefined): string;
    encodeFunctionData(functionFragment: "withdraw", values: [BigNumberish[]]): string;
    decodeFunctionResult(functionFragment: "claimRewards", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contractURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getStakeInfo", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "indexedTokens", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isIndexed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "nftCollection", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardToken", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "rewardsPerUnitTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setContractURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRewardsPerUnitTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setTimeUnit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakerAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "stakersArray", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "timeUnit", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
    events: {
        "ContractURIUpdated(string,string)": EventFragment;
        "OwnerUpdated(address,address)": EventFragment;
        "RewardsClaimed(address,uint256)": EventFragment;
        "TokensStaked(address,uint256[])": EventFragment;
        "TokensWithdrawn(address,uint256[])": EventFragment;
        "UpdatedRewardsPerUnitTime(uint256,uint256)": EventFragment;
        "UpdatedTimeUnit(uint256,uint256)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensStaked"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedRewardsPerUnitTime"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "UpdatedTimeUnit"): EventFragment;
}
export interface ContractURIUpdatedEventObject {
    prevURI: string;
    newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<[
    string,
    string
], ContractURIUpdatedEventObject>;
export type ContractURIUpdatedEventFilter = TypedEventFilter<ContractURIUpdatedEvent>;
export interface OwnerUpdatedEventObject {
    prevOwner: string;
    newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<[
    string,
    string
], OwnerUpdatedEventObject>;
export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;
export interface RewardsClaimedEventObject {
    staker: string;
    rewardAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<[
    string,
    BigNumber
], RewardsClaimedEventObject>;
export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;
export interface TokensStakedEventObject {
    staker: string;
    tokenIds: BigNumber[];
}
export type TokensStakedEvent = TypedEvent<[
    string,
    BigNumber[]
], TokensStakedEventObject>;
export type TokensStakedEventFilter = TypedEventFilter<TokensStakedEvent>;
export interface TokensWithdrawnEventObject {
    staker: string;
    tokenIds: BigNumber[];
}
export type TokensWithdrawnEvent = TypedEvent<[
    string,
    BigNumber[]
], TokensWithdrawnEventObject>;
export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;
export interface UpdatedRewardsPerUnitTimeEventObject {
    oldRewardsPerUnitTime: BigNumber;
    newRewardsPerUnitTime: BigNumber;
}
export type UpdatedRewardsPerUnitTimeEvent = TypedEvent<[
    BigNumber,
    BigNumber
], UpdatedRewardsPerUnitTimeEventObject>;
export type UpdatedRewardsPerUnitTimeEventFilter = TypedEventFilter<UpdatedRewardsPerUnitTimeEvent>;
export interface UpdatedTimeUnitEventObject {
    oldTimeUnit: BigNumber;
    newTimeUnit: BigNumber;
}
export type UpdatedTimeUnitEvent = TypedEvent<[
    BigNumber,
    BigNumber
], UpdatedTimeUnitEventObject>;
export type UpdatedTimeUnitEventFilter = TypedEventFilter<UpdatedTimeUnitEvent>;
export interface Staking721Base extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: Staking721BaseInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        claimRewards(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        contractURI(overrides?: CallOverrides): Promise<[string]>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<[
            BigNumber[],
            BigNumber
        ] & {
            _tokensStaked: BigNumber[];
            _rewards: BigNumber;
        }>;
        indexedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
        isIndexed(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        nftCollection(overrides?: CallOverrides): Promise<[string]>;
        owner(overrides?: CallOverrides): Promise<[string]>;
        rewardToken(overrides?: CallOverrides): Promise<[string]>;
        rewardsPerUnitTime(overrides?: CallOverrides): Promise<[BigNumber]>;
        setContractURI(_uri: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setOwner(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setRewardsPerUnitTime(_rewardsPerUnitTime: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        stake(_tokenIds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        stakerAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            amountStaked: BigNumber;
            timeOfLastUpdate: BigNumber;
            unclaimedRewards: BigNumber;
        }>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        timeUnit(overrides?: CallOverrides): Promise<[BigNumber]>;
        withdraw(_tokenIds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    claimRewards(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    contractURI(overrides?: CallOverrides): Promise<string>;
    getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<[
        BigNumber[],
        BigNumber
    ] & {
        _tokensStaked: BigNumber[];
        _rewards: BigNumber;
    }>;
    indexedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
    isIndexed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
    multicall(data: BytesLike[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    nftCollection(overrides?: CallOverrides): Promise<string>;
    owner(overrides?: CallOverrides): Promise<string>;
    rewardToken(overrides?: CallOverrides): Promise<string>;
    rewardsPerUnitTime(overrides?: CallOverrides): Promise<BigNumber>;
    setContractURI(_uri: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setOwner(_newOwner: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setRewardsPerUnitTime(_rewardsPerUnitTime: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    stake(_tokenIds: BigNumberish[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    stakerAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    stakers(arg0: string, overrides?: CallOverrides): Promise<[
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        amountStaked: BigNumber;
        timeOfLastUpdate: BigNumber;
        unclaimedRewards: BigNumber;
    }>;
    stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    timeUnit(overrides?: CallOverrides): Promise<BigNumber>;
    withdraw(_tokenIds: BigNumberish[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        claimRewards(overrides?: CallOverrides): Promise<void>;
        contractURI(overrides?: CallOverrides): Promise<string>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<[
            BigNumber[],
            BigNumber
        ] & {
            _tokensStaked: BigNumber[];
            _rewards: BigNumber;
        }>;
        indexedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isIndexed(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
        multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        nftCollection(overrides?: CallOverrides): Promise<string>;
        owner(overrides?: CallOverrides): Promise<string>;
        rewardToken(overrides?: CallOverrides): Promise<string>;
        rewardsPerUnitTime(overrides?: CallOverrides): Promise<BigNumber>;
        setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;
        setOwner(_newOwner: string, overrides?: CallOverrides): Promise<void>;
        setRewardsPerUnitTime(_rewardsPerUnitTime: BigNumberish, overrides?: CallOverrides): Promise<void>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: CallOverrides): Promise<void>;
        stake(_tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;
        stakerAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<[
            BigNumber,
            BigNumber,
            BigNumber
        ] & {
            amountStaked: BigNumber;
            timeOfLastUpdate: BigNumber;
            unclaimedRewards: BigNumber;
        }>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        timeUnit(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(_tokenIds: BigNumberish[], overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "ContractURIUpdated(string,string)"(prevURI?: null, newURI?: null): ContractURIUpdatedEventFilter;
        ContractURIUpdated(prevURI?: null, newURI?: null): ContractURIUpdatedEventFilter;
        "OwnerUpdated(address,address)"(prevOwner?: string | null, newOwner?: string | null): OwnerUpdatedEventFilter;
        OwnerUpdated(prevOwner?: string | null, newOwner?: string | null): OwnerUpdatedEventFilter;
        "RewardsClaimed(address,uint256)"(staker?: string | null, rewardAmount?: null): RewardsClaimedEventFilter;
        RewardsClaimed(staker?: string | null, rewardAmount?: null): RewardsClaimedEventFilter;
        "TokensStaked(address,uint256[])"(staker?: string | null, tokenIds?: BigNumberish[] | null): TokensStakedEventFilter;
        TokensStaked(staker?: string | null, tokenIds?: BigNumberish[] | null): TokensStakedEventFilter;
        "TokensWithdrawn(address,uint256[])"(staker?: string | null, tokenIds?: BigNumberish[] | null): TokensWithdrawnEventFilter;
        TokensWithdrawn(staker?: string | null, tokenIds?: BigNumberish[] | null): TokensWithdrawnEventFilter;
        "UpdatedRewardsPerUnitTime(uint256,uint256)"(oldRewardsPerUnitTime?: null, newRewardsPerUnitTime?: null): UpdatedRewardsPerUnitTimeEventFilter;
        UpdatedRewardsPerUnitTime(oldRewardsPerUnitTime?: null, newRewardsPerUnitTime?: null): UpdatedRewardsPerUnitTimeEventFilter;
        "UpdatedTimeUnit(uint256,uint256)"(oldTimeUnit?: null, newTimeUnit?: null): UpdatedTimeUnitEventFilter;
        UpdatedTimeUnit(oldTimeUnit?: null, newTimeUnit?: null): UpdatedTimeUnitEventFilter;
    };
    estimateGas: {
        claimRewards(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        contractURI(overrides?: CallOverrides): Promise<BigNumber>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<BigNumber>;
        indexedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isIndexed(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        nftCollection(overrides?: CallOverrides): Promise<BigNumber>;
        owner(overrides?: CallOverrides): Promise<BigNumber>;
        rewardToken(overrides?: CallOverrides): Promise<BigNumber>;
        rewardsPerUnitTime(overrides?: CallOverrides): Promise<BigNumber>;
        setContractURI(_uri: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setOwner(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setRewardsPerUnitTime(_rewardsPerUnitTime: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        stake(_tokenIds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        stakerAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        timeUnit(overrides?: CallOverrides): Promise<BigNumber>;
        withdraw(_tokenIds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        claimRewards(overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getStakeInfo(_staker: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        indexedTokens(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isIndexed(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        nftCollection(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        rewardsPerUnitTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        setContractURI(_uri: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setOwner(_newOwner: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setRewardsPerUnitTime(_rewardsPerUnitTime: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setTimeUnit(_timeUnit: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        stake(_tokenIds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        stakerAddress(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stakers(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        stakersArray(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        timeUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        withdraw(_tokenIds: BigNumberish[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=Staking721Base.d.ts.map