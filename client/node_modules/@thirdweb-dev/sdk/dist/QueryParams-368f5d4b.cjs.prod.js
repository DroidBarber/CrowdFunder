'use strict';

var BN = require('bn.js');
var ethers = require('ethers');
var zod = require('zod');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var BN__default = /*#__PURE__*/_interopDefault(BN);

/**
 * @internal
 */
const isBrowser = () => typeof window !== "undefined";
/**
 * @internal
 */
const FileOrBufferUnionSchema = isBrowser() ? zod.z.instanceof(File) : zod.z.instanceof(Buffer); // @fixme, this is a hack to make browser happy for now

/**
 * @internal
 */
const FileOrBufferSchema = zod.z.union([FileOrBufferUnionSchema, zod.z.object({
  data: zod.z.union([FileOrBufferUnionSchema, zod.z.string()]),
  name: zod.z.string()
})]);

/**
 * @internal
 */
const FileOrBufferOrStringSchema = zod.z.union([FileOrBufferSchema, zod.z.string()]);
const MAX_BPS = 10000;
const BytesLikeSchema = zod.z.union([zod.z.array(zod.z.number()), zod.z.string()]);
const BigNumberSchema = zod.z.union([zod.z.string(), zod.z.number(), zod.z.bigint(), zod.z.custom(data => {
  return ethers.BigNumber.isBigNumber(data);
}), zod.z.custom(data => {
  return BN__default["default"].isBN(data);
})]).transform(arg => {
  let str = BN__default["default"].isBN(arg) ? new BN__default["default"](arg).toString() : ethers.BigNumber.from(arg).toString();
  return ethers.BigNumber.from(str);
});
BigNumberSchema.transform(arg => arg.toString());
const BigNumberTransformSchema = zod.z.union([zod.z.bigint(), zod.z.custom(data => {
  return ethers.BigNumber.isBigNumber(data);
}), zod.z.custom(data => {
  return BN__default["default"].isBN(data);
})]).transform(arg => {
  if (BN__default["default"].isBN(arg)) {
    return new BN__default["default"](arg).toString();
  }
  return ethers.BigNumber.from(arg).toString();
});
const BasisPointsSchema = zod.z.number().max(MAX_BPS, "Cannot exceed 100%").min(0, "Cannot be below 0%");
const PercentSchema = zod.z.number().max(100, "Cannot exceed 100%").min(0, "Cannot be below 0%");
const HexColor = zod.z.union([zod.z.string().regex(/^([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, "Invalid hex color"), zod.z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, "Invalid hex color").transform(val => val.replace("#", "")), zod.z.string().length(0)]);
const AmountSchema = zod.z.union([zod.z.string().regex(/^([0-9]+\.?[0-9]*|\.[0-9]+)$/, "Invalid amount"), zod.z.number().min(0, "Amount cannot be negative")]).transform(arg => typeof arg === "number" ? arg.toString() : arg);

/**
 * @internal
 */

/**
 * @internal
 */
const QuantitySchema = zod.z.union([AmountSchema, zod.z.literal("unlimited")]).default("unlimited");
const RawDateSchema = zod.z.date().transform(i => {
  return ethers.BigNumber.from(Math.floor(i.getTime() / 1000));
});

/**
 * Default to now
 */
RawDateSchema.default(new Date(0));

/**
 * Default to 10 years from now
 */
RawDateSchema.default(new Date(Date.now() + 1000 * 60 * 60 * 24 * 365 * 10));

const PropertiesInput = zod.z.object({}).catchall(zod.z.union([BigNumberTransformSchema, zod.z.unknown()]));

/**
 * @internal
 */
const OptionalPropertiesInput = zod.z.union([zod.z.array(PropertiesInput), PropertiesInput]).optional();

/**
 * @internal
 */
const CommonNFTInput = zod.z.object({
  name: zod.z.union([zod.z.string(), zod.z.number()]).optional(),
  description: zod.z.string().nullable().optional(),
  image: FileOrBufferOrStringSchema.nullable().optional(),
  external_url: FileOrBufferOrStringSchema.nullable().optional(),
  animation_url: FileOrBufferOrStringSchema.optional(),
  background_color: HexColor.optional(),
  properties: OptionalPropertiesInput,
  attributes: OptionalPropertiesInput
}).catchall(zod.z.union([BigNumberTransformSchema, zod.z.unknown()]));

/**
 * @internal
 */
const NFTInputOrUriSchema = zod.z.union([CommonNFTInput, zod.z.string()]);

/**
 * @internal
 */
const CommonNFTOutput = CommonNFTInput.extend({
  id: zod.z.string(),
  uri: zod.z.string(),
  image: zod.z.string().nullable().optional(),
  external_url: zod.z.string().nullable().optional(),
  animation_url: zod.z.string().nullable().optional()
});

/**
 * @public
 */

const DEFAULT_API_KEY = "c6634ad2d97b74baf15ff556016830c251050e6c36b9da508ce3ec80095d3dc1";
function getRpcUrl(network) {
  return `https://${network}.rpc.thirdweb.com/${DEFAULT_API_KEY}`;
}

/**
 * @internal
 */
const DEFAULT_QUERY_ALL_COUNT = 100;
const QueryAllParamsSchema = zod.z.object({
  start: zod.z.number().default(0),
  count: zod.z.number().default(DEFAULT_QUERY_ALL_COUNT)
}).default({
  start: 0,
  count: DEFAULT_QUERY_ALL_COUNT
});

/**
 * Pagination Parameters
 * @public
 */

exports.AmountSchema = AmountSchema;
exports.BasisPointsSchema = BasisPointsSchema;
exports.BytesLikeSchema = BytesLikeSchema;
exports.CommonNFTInput = CommonNFTInput;
exports.CommonNFTOutput = CommonNFTOutput;
exports.DEFAULT_QUERY_ALL_COUNT = DEFAULT_QUERY_ALL_COUNT;
exports.FileOrBufferOrStringSchema = FileOrBufferOrStringSchema;
exports.MAX_BPS = MAX_BPS;
exports.NFTInputOrUriSchema = NFTInputOrUriSchema;
exports.PercentSchema = PercentSchema;
exports.QuantitySchema = QuantitySchema;
exports.QueryAllParamsSchema = QueryAllParamsSchema;
exports.getRpcUrl = getRpcUrl;
