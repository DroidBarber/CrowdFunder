import {
  ContractEncoder,
  ContractEvents,
  ContractInterceptor,
  ContractMetadata,
  ContractOwner,
  ContractPlatformFee,
  ContractPrimarySale,
  ContractRoles,
  ContractRoyalty,
  ContractWrapper,
  Erc721,
  Erc721WithQuantitySignatureMintable,
  GasCostEstimator,
  StandardErc721,
  TokenErc721ContractSchema,
  _defineProperty,
  getRoleHash,
  require_browser_ponyfill,
  require_bs58,
  require_dist,
  require_fast_deep_equal
} from "./chunk-HDJNXEED.js";
import "./chunk-GMTZS4FR.js";
import "./chunk-UXXT4I5S.js";
import {
  lib_exports7 as lib_exports,
  require_bn
} from "./chunk-3CTDGBZJ.js";
import "./chunk-WGAG4NG4.js";
import {
  __toESM
} from "./chunk-NZZIBU5Z.js";

// node_modules/@thirdweb-dev/sdk/dist/nft-collection-239c6356.esm.js
var import_bn = __toESM(require_bn());
var import_cross_fetch = __toESM(require_browser_ponyfill());
var import_bs58 = __toESM(require_bs58());
var import_merkletreejs = __toESM(require_dist());
var import_fast_deep_equal = __toESM(require_fast_deep_equal());
var NFTCollection = class extends StandardErc721 {
  constructor(network, address, storage) {
    let options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    let abi = arguments.length > 4 ? arguments[4] : void 0;
    let chainId = arguments.length > 5 ? arguments[5] : void 0;
    let contractWrapper = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : new ContractWrapper(network, address, abi, options);
    super(contractWrapper, storage, chainId);
    _defineProperty(this, "abi", void 0);
    _defineProperty(this, "metadata", void 0);
    _defineProperty(this, "roles", void 0);
    _defineProperty(this, "encoder", void 0);
    _defineProperty(this, "estimator", void 0);
    _defineProperty(this, "events", void 0);
    _defineProperty(this, "sales", void 0);
    _defineProperty(this, "platformFees", void 0);
    _defineProperty(this, "royalties", void 0);
    _defineProperty(this, "owner", void 0);
    _defineProperty(this, "signature", void 0);
    _defineProperty(this, "interceptor", void 0);
    _defineProperty(this, "erc721", void 0);
    this.abi = abi;
    this.metadata = new ContractMetadata(this.contractWrapper, TokenErc721ContractSchema, this.storage);
    this.roles = new ContractRoles(this.contractWrapper, NFTCollection.contractRoles);
    this.royalties = new ContractRoyalty(this.contractWrapper, this.metadata);
    this.sales = new ContractPrimarySale(this.contractWrapper);
    this.encoder = new ContractEncoder(this.contractWrapper);
    this.estimator = new GasCostEstimator(this.contractWrapper);
    this.events = new ContractEvents(this.contractWrapper);
    this.platformFees = new ContractPlatformFee(this.contractWrapper);
    this.interceptor = new ContractInterceptor(this.contractWrapper);
    this.erc721 = new Erc721(this.contractWrapper, this.storage, chainId);
    this.signature = new Erc721WithQuantitySignatureMintable(this.contractWrapper, this.storage);
    this.owner = new ContractOwner(this.contractWrapper);
  }
  onNetworkUpdated(network) {
    this.contractWrapper.updateSignerOrProvider(network);
  }
  getAddress() {
    return this.contractWrapper.readContract.address;
  }
  async isTransferRestricted() {
    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash("transfer"), lib_exports.AddressZero);
    return !anyoneCanTransfer;
  }
  async mint(metadata) {
    return this.erc721.mint(metadata);
  }
  async mintTo(walletAddress, metadata) {
    return this.erc721.mintTo(walletAddress, metadata);
  }
  async mintBatch(metadata) {
    return this.erc721.mintBatch(metadata);
  }
  async mintBatchTo(walletAddress, metadata) {
    return this.erc721.mintBatchTo(walletAddress, metadata);
  }
  async burn(tokenId) {
    return this.erc721.burn(tokenId);
  }
  async call(functionName) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return this.contractWrapper.call(functionName, ...args);
  }
};
_defineProperty(NFTCollection, "contractRoles", ["admin", "minter", "transfer"]);
export {
  NFTCollection
};
//# sourceMappingURL=nft-collection-239c6356.esm-GEXCMSSR.js.map
