{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/split-19d2d8dc.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from './defineProperty-e24c82ea.esm.js';\nimport { cB as ContractWrapper, aj as ContractMetadata, cS as SplitsContractSchema, ak as ContractRoles, ai as ContractEncoder, aT as GasCostEstimator, aU as ContractEvents, aV as ContractInterceptor, b4 as fetchCurrencyValue } from './thirdweb-checkout-607fc720.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, Contract } from 'ethers';\nimport 'zod';\nimport './QueryParams-ac0149c6.esm.js';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'eventemitter3';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\n\n/**\n * Create custom royalty splits to distribute funds.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"split\");\n * ```\n *\n * @public\n */\nclass Split {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, SplitsContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, Split.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get Recipients of this splits contract\n   *\n   * @remarks Get the data about the shares of every split recipient on the contract\n   *\n   * @example\n   * ```javascript\n   * const recipients = await contract.getAllRecipients();\n   * console.log(recipients);\n   * ```\n   */\n  async getAllRecipients() {\n    const recipients = [];\n    let index = BigNumber.from(0);\n    const totalRecipients = await this.contractWrapper.readContract.payeeCount();\n    while (index.lt(totalRecipients)) {\n      try {\n        const recipientAddress = await this.contractWrapper.readContract.payee(index);\n        recipients.push(await this.getRecipientSplitPercentage(recipientAddress));\n        index = index.add(1);\n      } catch (err) {\n        // The only way we know how to detect that we've found all recipients\n        // is if we get an error when trying to get the next recipient.\n        if (\"method\" in err && err[\"method\"].toLowerCase().includes(\"payee(uint256)\")) {\n          break;\n        } else {\n          throw err;\n        }\n      }\n    }\n    return recipients;\n  }\n\n  /**\n   * Returns all the recipients and their balances in the native currency.\n   *\n   * @returns A map of recipient addresses to their balances in the native currency.\n   */\n  async balanceOfAllRecipients() {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOf(recipient.address);\n    }\n    return balances;\n  }\n\n  /**\n   * Returns all the recipients and their balances in a non-native currency.\n   *\n   * @param tokenAddress - The address of the currency to check the balances in.\n   * @returns A map of recipient addresses to their balances in the specified currency.\n   */\n  async balanceOfTokenAllRecipients(tokenAddress) {\n    const recipients = await this.getAllRecipients();\n    const balances = {};\n    for (const recipient of recipients) {\n      balances[recipient.address] = await this.balanceOfToken(recipient.address, tokenAddress);\n    }\n    return balances;\n  }\n\n  /**\n   * Get Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * const funds = await contract.balanceOf(address);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOf(address) {\n    const walletBalance = await this.contractWrapper.readContract.provider.getBalance(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased()\"]();\n    const totalReceived = walletBalance.add(totalReleased);\n    return this._pendingPayment(address, totalReceived, await this.contractWrapper.readContract[\"released(address)\"](address));\n  }\n\n  /**\n   * Get non-native Token Funds owed to a particular wallet\n   *\n   * @remarks Get the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n   *\n   * @example\n   * ```javascript\n   * // The address to check the funds of\n   * const address = \"{{wallet_address}}\";\n   * // The address of the currency to check the contracts funds of\n   * const tokenAddress = \"0x...\"\n   * const funds = await contract.balanceOfToken(address, tokenAddress);\n   * console.log(funds);\n   * ```\n   */\n  async balanceOfToken(walletAddress, tokenAddress) {\n    const erc20 = new Contract(tokenAddress, ERC20Abi, this.contractWrapper.getProvider());\n    const walletBalance = await erc20.balanceOf(this.getAddress());\n    const totalReleased = await this.contractWrapper.readContract[\"totalReleased(address)\"](tokenAddress);\n    const totalReceived = walletBalance.add(totalReleased);\n    const value = await this._pendingPayment(walletAddress, totalReceived, await this.contractWrapper.readContract[\"released(address,address)\"](tokenAddress, walletAddress));\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, value);\n  }\n\n  /**\n   * Get the % of funds owed to a given address\n   * @param address - the address to check percentage of\n   */\n  async getRecipientSplitPercentage(address) {\n    const [totalShares, walletsShares] = await Promise.all([this.contractWrapper.readContract.totalShares(), this.contractWrapper.readContract.shares(address)]);\n    // We convert to basis points to avoid floating point loss of precision\n    return {\n      address,\n      splitPercentage: walletsShares.mul(BigNumber.from(1e7)).div(totalShares).toNumber() / 1e5\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Withdraw Funds\n   * @remarks Triggers a transfer to account of the amount of native currency they are owed.\n   *\n   * @example\n   * ```javascript\n   * // the wallet address that wants to withdraw their funds\n   * const walletAddress = \"{{wallet_address}}\"\n   * await contract.withdraw(walletAddress);\n   * ```\n   *\n   * @param walletAddress - The address to distributes the amount to\n   */\n  async withdraw(walletAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address)\", [walletAddress])\n    };\n  }\n\n  /**\n   * Triggers a transfer to account of the amount of a given currency they are owed.\n   *\n   * @param walletAddress - The address to distributes the amount to\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  async withdrawToken(walletAddress, tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"release(address,address)\", [tokenAddress, walletAddress])\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * await contract.distribute();\n   * ```\n   */\n  async distribute() {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute()\", [])\n    };\n  }\n\n  /**\n   * Distribute Funds\n   *\n   * @remarks Distribute funds held by the contract in the native currency to all recipients.\n   *\n   * @example\n   * ```javascript\n   * // The address of the currency to distribute funds\n   * const tokenAddress = \"0x...\"\n   * await contract.distributeToken(tokenAddress);\n   * ```\n   *\n   * @param tokenAddress - The address of the currency contract to distribute funds\n   */\n  async distributeToken(tokenAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"distribute(address)\", [tokenAddress])\n    };\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n\n  async _pendingPayment(address, totalReceived, alreadyReleased) {\n    const addressReceived = totalReceived.mul(await this.contractWrapper.readContract.shares(address));\n    const totalRoyaltyAvailable = addressReceived.div(await this.contractWrapper.readContract.totalShares());\n    return totalRoyaltyAvailable.sub(alreadyReleased);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(Split, \"contractRoles\", [\"admin\"]);\n\nexport { Split };\n"],
  "mappings": "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",
  "names": []
}
