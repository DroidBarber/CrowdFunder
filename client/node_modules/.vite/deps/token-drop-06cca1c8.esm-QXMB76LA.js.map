{
  "version": 3,
  "sources": ["../../@thirdweb-dev/sdk/dist/token-drop-06cca1c8.esm.js"],
  "sourcesContent": ["import { _ as _defineProperty } from './defineProperty-e24c82ea.esm.js';\nimport { ax as StandardErc20, cB as ContractWrapper, aj as ContractMetadata, cT as DropErc20ContractSchema, ak as ContractRoles, ai as ContractEncoder, aT as GasCostEstimator, aU as ContractEvents, am as ContractPrimarySale, aW as ContractPlatformFee, aV as ContractInterceptor, ao as DropClaimConditions, bx as getRoleHash } from './thirdweb-checkout-607fc720.esm.js';\nimport { constants } from 'ethers';\nimport 'zod';\nimport './QueryParams-ac0149c6.esm.js';\nimport 'bn.js';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'eventemitter3';\nimport 'cross-fetch';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/DropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport 'bs58';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\n\n/**\n * Create a Drop contract for a standard crypto token or cryptocurrency.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"token-drop\");\n * ```\n *\n */\nclass TokenDrop extends StandardErc20 {\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim Tokens, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxQuantity: 3117.42, // limit how many tokens are released in this presale\n   *     price: 0.001, // presale price per token\n   *     snapshot: ['0x...', '0x...'], // limit claiming to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.008, // public sale price per token\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * @internal\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    super(contractWrapper, storage, chainId);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"roles\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"sales\", void 0);\n    _defineProperty(this, \"platformFees\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"claimConditions\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    this.abi = abi;\n    this.metadata = new ContractMetadata(this.contractWrapper, DropErc20ContractSchema, this.storage);\n    this.roles = new ContractRoles(this.contractWrapper, TokenDrop.contractRoles);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.sales = new ContractPrimarySale(this.contractWrapper);\n    this.platformFees = new ContractPlatformFee(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n    this.claimConditions = new DropClaimConditions(this.contractWrapper, this.metadata, this.storage);\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get your wallet voting power for the current checkpoints\n   *\n   * @returns the amount of voting power in tokens\n   */\n  async getVoteBalance() {\n    return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress());\n  }\n  async getVoteBalanceOf(account) {\n    return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(account));\n  }\n\n  /**\n   * Get your voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegation() {\n    return await this.getDelegationOf(await this.contractWrapper.getSignerAddress());\n  }\n\n  /**\n   * Get a specific address voting delegatee address\n   *\n   * @returns the address of your vote delegatee\n   */\n  async getDelegationOf(account) {\n    return await this.contractWrapper.readContract.delegates(account);\n  }\n\n  /**\n   * Get whether users can transfer tokens from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole(getRoleHash(\"transfer\"), constants.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Claim a certain amount of tokens\n   * @remarks See {@link TokenDrop.claimTo}\n   * @param amount - the amount of tokens to mint\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   */\n  async claim(amount) {\n    let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return this.claimTo(await this.contractWrapper.getSignerAddress(), amount, checkERC20Allowance);\n  }\n\n  /**\n   * Claim a certain amount of tokens to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim Tokens.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 42.69; // how many tokens you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx.receipt; // the transaction receipt\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param amount - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - The transaction receipt\n   */\n  async claimTo(destinationAddress, amount) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc20.claimTo(destinationAddress, amount, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Lets you delegate your voting power to the delegateeAddress\n   *\n   * @param delegateeAddress - delegatee wallet address\n   * @alpha\n   */\n  async delegateTo(delegateeAddress) {\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"delegate\", [delegateeAddress])\n    };\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the connected wallet\n   *\n   * @example\n   * ```javascript\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnTokens(amount);\n   * ```\n   */\n  async burnTokens(amount) {\n    return this.erc20.burn(amount);\n  }\n\n  /**\n   * Burn Tokens\n   *\n   * @remarks Burn tokens held by the specified wallet\n   *\n   * @example\n   * ```javascript\n   * // Address of the wallet sending the tokens\n   * const holderAddress = \"{{wallet_address}}\";\n   *\n   * // The amount of this token you want to burn\n   * const amount = 1.2;\n   *\n   * await contract.burnFrom(holderAddress, amount);\n   * ```\n   */\n  async burnFrom(holder, amount) {\n    return this.erc20.burnFrom(holder, amount);\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n_defineProperty(TokenDrop, \"contractRoles\", [\"admin\", \"transfer\"]);\n\nexport { TokenDrop };\n"],
  "mappings": "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",
  "names": []
}
